---
description:  #  My custom Rules
globs:     # Empty
alwaysApply: true
---
##

# üìã Project Coding Guidelines (.cursorrules.mdc)

### Core Files (Required)

Before starting any project, initialize a `memory-bank/` folder with the following files:

1. `projectbrief.md`
   - Foundation document that shapes all other files
   - Created at project start if it doesn't exist
   - Defines core requirements and goals
   - Source of truth for project scope

2. `productContext.md`
   - Why this project exists
   - Problems it solves
   - How it should work
   - User experience goals

3. `activeContext.md`
   - Current work focus
   - Recent changes
   - Next steps
   - Active decisions and considerations

4. `systemPatterns.md`
   - System architecture
   - Key technical decisions
   - Design patterns in use
   - Component relationships

5. `techContext.md`
   - Technologies used
   - Development setup
   - Technical constraints
   - Dependencies

6. `progress.md`
   - What works
   - What's left to build

---

## ‚úÖ Git Version Control

- Always commit successful changes after testing.
- Use **descriptive commit messages** (e.g., ‚ÄúFix scraper crash on empty title‚Äù).
- Commit after each working feature or bug fix.
- Never commit broken or untested code.

```cursor
when: after tests pass
do:
  - git add <changed_files>
  - git commit -m "Descriptive message about changes"
```

---

## ‚úÖ Testing Before Commits

- Run all relevant parts (e.g., scrapers, endpoints) before each commit.
- Fix all errors or failed tests before proceeding.
- Do not commit unless the feature behaves as expected.

```cursor
when: before git add
require:
  - All tests must pass
  - No new errors or warnings in logs or console
```

---

## ‚úÖ File Organization

Use this structure to keep the project organized:

| File              | Purpose                                 |
|-------------------|-----------------------------------------|
| `requirements.txt`| List of dependencies                    |
| `config.py`       | Centralized configuration variables     |
| `README.md`       | Project documentation                   |
| `.gitignore`      | Exclude `.env`, `.pyc`, `.vscode/`      |

```cursor
when: adding new files
enforce:
  - dependencies ‚Üí requirements.txt
  - configuration ‚Üí config.py
  - documentation ‚Üí README.md
  - cleanup ‚Üí .gitignore updated
```

---

## ‚úÖ Git Workflow (Quick Reference)

After making code changes:

```bash
1. Test the changes
2. git add <changed_files>
3. git commit -m "Descriptive message about changes"
4. If working on a feature branch:
   git checkout main
   git merge <feature-branch>
```

```cursor
when: preparing commit
remind: "Follow the Git workflow: test ‚Üí add ‚Üí commit ‚Üí (optional) merge"
```

---

## ‚úÖ HTML ID Naming

All HTML `id` attributes must be unique and scoped semantically to avoid conflicts.

### ‚úÖ Good
- `settings-button-save`
- `login-form-input-email`
- `profile-section-header`

### ‚ùå Bad
- `main`
- `title`
- `container`

```cursor
when: writing HTML
check:
  pattern: '<[^>]*id=["'']([^"'']+)["''][^>]*>'
  rule: "All `id` attributes must be unique. Use prefixed, scoped naming like `section-feature-id`."
```
